// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  groups    GroupMember[]
  payments  Payment[]
  splits    Split[]
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  members     GroupMember[]
  payments    Payment[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      String
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
}

model Payment {
  id           Int       @id @default(autoincrement())
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      Int
  payer        User      @relation(fields: [payerId], references: [id])
  payerId      Int
  amount       Float     // 支払額（元の通貨での金額）
  currency     Currency  @relation(fields: [currencyId], references: [id])
  currencyId   Int       // 通貨ID（外部キー）
  exchangeRate Float?    // 為替レート（例: 1 USD = X JPY）
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  description  String?
  paidAt       DateTime  @default(now())
  splits       Split[]
  tags         PaymentTag[]
}

model Currency {
  id   Int    @id @default(autoincrement())
  code String @unique // 通貨コード（ISO 4217形式）
  name String         // 通貨名（例: Japanese Yen, US Dollar）

  Payment Payment[]
}

model Split {
  id         Int      @id @default(autoincrement())
  payment    Payment  @relation(fields: [paymentId], references: [id])
  paymentId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  amount     Float
  percentage Float?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String // カテゴリ名

  Payment Payment[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String // タグ名

  PaymentTag PaymentTag[]
}

model PaymentTag {
  id         Int      @id @default(autoincrement())
  payment    Payment  @relation(fields: [paymentId], references: [id])
  paymentId  Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@unique([paymentId, tagId]) // 同じ支払いに同じタグを複数回付けられないようにする
}
