// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/postgres"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  groups    GroupMember[]
  payments  Payment[]
  splits    Split[]
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  members     GroupMember[]
  payments    Payment[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      String
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
}

model Payment {
  id          Int       @id @default(autoincrement())
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     Int
  payer       User      @relation(fields: [payerId], references: [id])
  payerId     Int
  amount      Float
  category    String?
  description String?
  paidAt      DateTime  @default(now())
  splits      Split[]
}

model Split {
  id          Int      @id @default(autoincrement())
  payment     Payment  @relation(fields: [paymentId], references: [id])
  paymentId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  amount      Float
  percentage  Float?
}
